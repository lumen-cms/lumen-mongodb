#import User UserListPayload from './schemas/user.graphql'
#import MutationType, UpdateOnePayload, InsertOnePayload from '../../graphql/genericTypesAndEnums.graphql'

type Query {
    users: [UserListPayload!]!
    me: User!
}
type SignupPayload{
    token:String!
    user:User!
}
type LoginPayload{
    token: String!
    user: User!
}

input UpdateUserInput{
    _id:String!,
    firstName: String,
    lastName: String,
    email: String
}

type Mutation {
    updateUser(data:UpdateUserInput): UpdateOnePayload!
    createUser(firstName: String!, lastName: String!, email: String!): InsertOnePayload!
    signup(firstName:String!, lastName:String!, email:String!, password:String!): SignupPayload!
    login(email:String!, password:String!): SignupPayload!
}

type SubscriptionPayload{
    node:User
    mutationType: MutationType
}

input UserCoreInput{
    _id:String
    clubId:String
    clubIds:[String!]
    teamId:String
    teamIds:[String!]
}

input UserSubscriptionWhereInput{
    mutation_in:[MutationType!]
    node:UserCoreInput
    AND:[UserSubscriptionWhereInput!]
    OR:[UserSubscriptionWhereInput!]
}

type Subscription {
    user(where: UserSubscriptionWhereInput):SubscriptionPayload!
}

