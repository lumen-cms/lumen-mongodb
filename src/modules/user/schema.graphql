#import User UserListPayload Permission from './schemas/user.graphql'
#import MutationType, UpdateOnePayload, InsertOnePayload, DeleteOnePayload from '../../graphql/genericTypesAndEnums.graphql'


type SignupUserPayload{
    id:String!
    firstName:String!
    lastName:String
    email:String!
    permissions:[Permission!]!
}

type SignupLoginPayload{
    token:String!
    user:SignupUserPayload!
}

input UpdateUserInput{
    _id:String!,
    firstName: String,
    lastName: String,
    email: String
}

input LoginInput{
    email:String!,
    password:String!
}

input SignupInput{
    email:String!
    password:String!
    firstName:String!
    lastName:String!
    password:String!
}

input CreateUserInput{
    firstName: String!
    lastName: String!
    email: String!
}
input DeleteUserInput{
    id:String
    username:String
}

type Mutation {
    updateUser(data:UpdateUserInput): UpdateOnePayload!
    createUser(data:CreateUserInput): InsertOnePayload!
    signup(data:SignupInput): SignupLoginPayload!
    login(data:LoginInput): SignupLoginPayload!
    deleteUser(where:DeleteUserInput):DeleteOnePayload!
}

type Query {
    users: [UserListPayload!]!
    me: User!
}


type SubscriptionPayload{
    node:User
    mutationType: MutationType
}

input UserCoreInput{
    _id:String
    clubId:String
    clubIds:[String!]
    teamId:String
    teamIds:[String!]
}

input UserSubscriptionWhereInput{
    mutation_in:[MutationType!]
    node:UserCoreInput
    AND:[UserSubscriptionWhereInput!]
    OR:[UserSubscriptionWhereInput!]
}

type Subscription {
    user(where: UserSubscriptionWhereInput):SubscriptionPayload!
}

