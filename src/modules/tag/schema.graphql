input TagInputForeignField{
    id:String!
    title:String!
    slug:String!
}

type TagTypeForeignField{
    id: String
    title: String
    slug: String
}



input FindTagsInput {
    id:RootStringFilter
    title:RootStringFilter
    type:RootStringFilter
    slug:RootStringFilter
    AND:[FindTagsInput]
    OR:[FindTagsInput]
    NOR:[FindTagsInput]
}

input TagInput{
    languageKey:String!
    title:String!
    type:String!
    slug:Slug!
}

input TagUpdateInput{
    languageKey:String
    title:String
    type:String
    slug:Slug
}

type TagMeta{
    articles:[String!]
    files:[String!]
}

type Tag{
    id:String!
    languageKey:String!
    title:String!
    type:String!
    slug:Slug!
    _meta: TagMeta
}

type TagType{
    id:String!
    languageKey:String!
    title:String!
    type:String!
    slug:Slug!
    _meta: TagMeta
}

input ModifyTagInput{
    id:String!
}

type TagSearch{
    id:String
    title:String
    languageKey:String
    slug:String
    type:String
}

type Query {
    tags(where:FindTagsInput): [Tag] @MongoFind
}

type Mutation{
    tagsCreateOne(data:TagInput!): InsertOnePayload! @MongoCreateOne
    tagsDeleteOne(where:ModifyTagInput!):DeleteOnePayload! @MongoDeleteOne
    tagsUpdateOne(where:ModifyTagInput!, data:TagUpdateInput!):UpdateOnePayload! @MongoUpdateOne
}